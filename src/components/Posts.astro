---
import { Image } from "astro:assets";

// Import all images from the viral-posts folder
const images = import.meta.glob("/public/viral-posts/*.{png,jpg,jpeg,gif}");

// Create the posts list dynamically
const posts = await Promise.all(
  Object.entries(images).map(async ([path, importFunc]) => {
    const imagePath = path.replace("/public", "");
    const fileName = path.split("/").pop() || "";
    const alt = fileName.split(".").slice(0, -1).join(".");
    return { image: imagePath, alt };
  }),
);

const linkText = "/";
---

<section class="py-12">
  <div class="grid grid-cols-[1fr,2fr] p-4 gap-8 pr-12">
    <div class="pl-4">
      <h1 class="text-white text-5xl italic max-w-xs purpleText pb-8">
        Our Viral Posts
      </h1>
      <p class="text-white max-w-sm">
        Viral Asia is a leading social media marketing company in Singapore that
        helps businesses grow their online presence. Our content is tailor-made
        for the Singapore market, delivering high engagement with over 100,000
        view post every month, helping your brand reach a vibrant and active
        Singapore local audience.
      </p>
      <p class="text-white mt-8 underline">
        <a href={linkText}>Learn more</a>
      </p>
    </div>
    <div class="overflow-hidden h-[400px] flex items-center relative">
      <div class="fade-left"></div>
      <div class="fade-right"></div>
      <div class="flex scroll-container animate-scroll hover:pause">
        {
          [...posts, ...posts, ...posts].map((post) => (
            <div class="flex-shrink-0 w-48 mx-2">
              <Image
                src={post.image}
                width={300}
                height={400}
                alt={post.alt}
                class="object-cover w-full h-full rounded-md"
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(calc(-250px * 7));
    }
  }

  .animate-scroll {
    animation: scroll 40s linear infinite;
  }

  .hover\:pause:hover {
    animation-play-state: paused;
  }

  .fade-left,
  .fade-right {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 50px;
    z-index: 1;
    pointer-events: none;
  }

  .fade-left {
    left: 0;
    background: linear-gradient(to right, #141414, rgba(20, 20, 20, 0));
  }

  .fade-right {
    right: 0;
    background: linear-gradient(to left, #141414, rgba(20, 20, 20, 0));
  }

  .scroll-container {
    overflow-x: auto;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .scroll-container::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  const scrollContainer = document.querySelector('.scroll-container');

  if (scrollContainer) {
    let isManualScrolling = false;
    let autoScrollInterval;

    function startAutoScroll() {
      if (!isManualScrolling) {
        scrollContainer.classList.add('animate-scroll');
      }
    }

    function stopAutoScroll() {
      scrollContainer.classList.remove('animate-scroll');
    }

    scrollContainer.addEventListener('wheel', (evt) => {
      evt.preventDefault();
      stopAutoScroll();
      scrollContainer.scrollLeft += evt.deltaY;
      isManualScrolling = true;
      clearTimeout(autoScrollInterval);
      autoScrollInterval = setTimeout(() => {
        isManualScrolling = false;
        startAutoScroll();
      }, 2000);
    });

    let isDown = false;
    let startX;
    let scrollLeft;

    scrollContainer.addEventListener('mousedown', (e) => {
      isDown = true;
      startX = e.pageX - scrollContainer.offsetLeft;
      scrollLeft = scrollContainer.scrollLeft;
      stopAutoScroll();
    });

    scrollContainer.addEventListener('mouseleave', () => {
      isDown = false;
      startAutoScroll();
    });

    scrollContainer.addEventListener('mouseup', () => {
      isDown = false;
      isManualScrolling = true;
      clearTimeout(autoScrollInterval);
      autoScrollInterval = setTimeout(() => {
        isManualScrolling = false;
        startAutoScroll();
      }, 2000);
    });

    scrollContainer.addEventListener('mousemove', (e) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - scrollContainer.offsetLeft;
      const walk = (x - startX) * 2;
      scrollContainer.scrollLeft = scrollLeft - walk;
    });

    startAutoScroll();
  }
</script>
